Okay so for sending messages
Research public and private keys
Each user has their own public key in the db
Each user though has their own private key stored on the db but protected with their own hashed password
To send a message to a user, the message sends a JSON
Markdown: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet
{
message: "Emphasis, aka italics, with *asterisks* or _underscores_.
Strong emphasis, aka bold, with **asterisks** or __underscores__.
Combined emphasis with **asterisks and _underscores_**.
Strikethrough uses two tildes. ~~Scratch this.~~"
from: "SENDERS_USERNAME"
to: "RECEIVERS_USERNAME"
time: 14:00
date: MM/DD/YYYY
files: "IMPLEMENT FEATURE"
}
The server takes this JSON, takes the usernames public key and puts the encrypted messages in their inbox table
#### USERNAMES | MESSAGES_WAITING (another table)
Then when receivers phone is on and there is a connection, the messages wil be downloaded and decrypted using a private
key that can be accessed by using the receivers hashed password as the password required to access the private key.
or.....every time there is a new login for the instant messaging app, a new public and private key will be made and this
private key will be stored on the device locally (not on the db) and the public key will go on the db
